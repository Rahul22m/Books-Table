*Request*
-The req object represents the HTTP request and has properties for the request query string, parameters, body, HTTP headers, and so on.
-The req object examine calls from the client side, make HTTP requests, and handle incoming data whether in a string or JSON object.

#Managing Client-Side Data#
-Express servers receive data from the client side through the req object in three instances: 
    the req.params, req.query, and req.body objects.

req.params:
-The req.params object captures data based on the parameter specified in the URL.
    // GET https://example.com/user/1

    app.get('/:userid', (req, res) => {
    console.log(req.params.userid) // "1"
    })
-The req.params object tells Express to output the result of a userâ€™s id through the parameter '/:userid'. 

req.query:
- the req.query object access a URL query string, to search, filter, and sort through data.
    // GET https://example.com/search?keyword=great-white

    app.get('/search', (req, res) => {
    console.log(req.query.keyword) // "great-white"
    })

req.body:
-The req.body object allows you to access data in a string or JSON object from the client side.
-Contains key-value pairs of data submitted in the request body. By default, it is undefined, and is populated when you use body-parsing middleware such as express.json() or express.urlencoded().
    // POST https://example.com/login
    //
    //      {
    //        "email": "user@example.com",
    //        "password": "helloworld"
    //      }

    app.post('/login', (req, res) => {
    console.log(req.body.email) // "user@example.com"
    console.log(req.body.password) // "helloworld"
    })

#Examining the URL With req Properties#
-Properties on the req object can also return the parts of a URL based on the anatomy. 
 This includes the protocol, hostname, path, originalUrl, and subdomains.
    // https://ocean.example.com/creatures?filter=sharks

    app.get('/creatures', (req, res) => {
    console.log(req.protocol)     // "https"
    console.log(req.hostname)     // "example.com"
    console.log(req.path)         // "/creatures"
    console.log(req.originalUrl)  // "/creatures?filter=sharks"
    console.log(req.subdomains)   // "['ocean']"
    })


#Additional req Properties#

req.method:
The .method property returns the current HTTP request method.
    app.delete('/', (req, res) => {
    console.log(req.method) // "DELETE"
    })

req.header:
-For headers sent into your server, append the method .header() to your req object. 
-The req.header() method will return the header type such as Content-Type and Authorization. The argument for req.header() is case-insensitive.
    app.post('/login', (req, res) => {
    req.header('Content-Type')  // "application/json"
    req.header('user-agent')    // "Mozilla/5.0 (Macintosh Intel Mac OS X 10_8_5) AppleWebKi..."
    req.header('Authorization') // "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
    })

